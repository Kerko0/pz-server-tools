#!/etc/pzst/env/bin/python

import os
from os.path import dirname, exists, isfile, join, realpath

import sys
import json
import time
import errno
import requests

from retry import retry
from datetime import datetime, timedelta


class PZMonitor:

	def __init__(self, config, restart=False, update_cache=False):

		self.server_configs = {}

		servers = config.get('pzservers', [])

		mods = self.get_all_server_mods(servers)

		old_cache = self.get_old_cache()
		new_cache = self.get_new_cache(mods)

		if update_cache:
			with open(cache_path, 'w') as fd:
				fd.write(json.dumps(new_cache) + os.linesep)

		updated_mods = self.check_mod_updates(old_cache, new_cache)

		if restart:
			self.restart_servers(updated_mods)

	def get_all_server_mods(self, servers):

		mods = set()

		for server in servers:

			server_config = self.parse_server_config(server)
			for mod in server_config.get('WorkshopItems', []):
				mods.add(mod)

		return mods

	def parse_server_config(self, server):

		server_config = {}

		server_ini = '/home/%s/Zomboid/Server/servertest.ini' % server
		with open(server_ini) as fd:
			lines = fd.readlines()

		for line in lines:

			line = line.strip()
			if not line:
				continue

			tokens = line.split('=', 1)

			key = tokens[0].strip()
			value = tokens[1].strip()

			values = set()
			for value in value.split(';'):
				value = value.strip()
				if value:
					values.add(value)

			server_config[key] = values

		self.server_configs[server] = server_config
		return server_config

	def get_old_cache(self):

		old_cache = {}

		if isfile(cache_path):
			with open(cache_path) as fd:
				old_cache = json.loads(fd.read())

		return old_cache

	@retry(tries=5)
	def get_new_cache(self, mods):

		steam_url = 'https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/'

		if len(mods) == 0:
			return {}

		data = {}
		data['itemcount'] = len(mods)

		for i, workshop_id in enumerate(mods):
			key = 'publishedfileids[%d]' % i
			data[key] = workshop_id

		jsondata = requests.post(steam_url, data=data).json()

		mods = {}

		for workshop_item in jsondata['response']['publishedfiledetails']:

			mod_id = workshop_item['publishedfileid']

			mods[mod_id] = {
				'name':    workshop_item['title'],
				'updated': workshop_item['time_updated'],
			}

		return mods

	def check_mod_updates(self, old_cache, new_cache):

		mods = set()

		for mod_id, mod in new_cache.items():

			if mod_id not in old_cache:
				print('New mod detected: ' + mod['name'])
				mods.add(mod_id)

			else:
				old_update = old_cache[mod_id]['updated']
				new_update = new_cache[mod_id]['updated']
				if old_update < new_update:
					print('Mod update detected: [' + mod_id + '] ' + mod['name'])
					mods.add(mod_id)

		return mods

	def restart_servers(self, mods):

		servers_to_restart = set()

		for mod in mods:
			for server, server_config in self.server_configs.items():
				if mod in server_config.get('WorkshopItems', []):
					servers_to_restart.add(server)
					break

		for server in servers_to_restart:
			restartswitch = '/tmp/pzserver.%s.restart' % server
			open(restartswitch, 'w').close()

if __name__ == '__main__':

	config_path = '/etc/pzst/config.json'
	if not isfile(config_path):
		print('Configuration not found: ' + config_path, file=sys.stderr)
		sys.exit(1)

	with open(config_path) as fd:
		config = json.loads(fd.read())

	cache_path = '/var/cache/pzst/cache.json'

	restart      = '-r' in sys.argv or '--restart'      in sys.argv
	update_cache = '-u' in sys.argv or '--update-cache' in sys.argv

	PZMonitor(config, restart=restart, update_cache=update_cache)
