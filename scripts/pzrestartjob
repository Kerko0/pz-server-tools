#!/etc/pzst/env/bin/python

import os
import sys
import json
import time
import errno

from pwd import getpwnam
from os.path import exists
from datetime import timedelta
from subprocess import call, DEVNULL

class PZRestarterJob:

	def __init__(self, config, server, now=False):
		self.server = server
		self.lockpath = '/var/cache/pzst/restartjob.' + server
		self.restart_sequence = config.get('restart-sequence', [15, 10, 5, 2, 1])
		self.env = dict(os.environ)
		self.env['USER'] = server

		self.lock()

		if not now:
			self.wait_alert_sequence()

		self.pzserver_restart(server)

		self.unlock()

	def lock(self):

		uid = getpwnam(self.server).pw_uid
		flags = os.O_CREAT|os.O_EXCL|os.O_WRONLY

		try:

			os.close(os.open(self.lockpath, flags, mode=0o644))
			os.chown(self.lockpath, uid, uid)

		except OSError as error:

			if error.errno == errno.EEXIST:
				print('Another instance of this script is already running!', file=sys.stderr)
				sys.exit(0)

			raise

	def unlock(self):
		os.remove(self.lockpath)

	def pzserver_message(self, server, message):
		call(['/usr/local/bin/pzmessage', message ], env=self.env, stdout=DEVNULL)

	def pzserver_restart(self, server):
		call(['/usr/local/bin/pzrestart' ], env=self.env, stdout=DEVNULL)

	def wait_alert_sequence(self):

		sequence = self.get_alert_sequence()

		alerts = list(sequence)
		for delay in sequence:

			countdown = sum(alerts)
			alerts.remove(delay)

			plural = countdown >= 2 and 's' or ''
			minutes = str(timedelta(minutes=countdown)).lstrip('0').lstrip(':')
			message = 'Restarting server in %s minute%s!' % (minutes, plural)

			self.pzserver_message(self.server, message)

			time.sleep(delay * 60)

	def get_alert_sequence(self):

		alert_sequence = []

		for i, minutes in enumerate(self.restart_sequence):

			delta = 0
			if i + 1 < len(self.restart_sequence):
				delta = self.restart_sequence[i + 1]

			alert_sequence.append(minutes - delta)

		return alert_sequence


if __name__ == '__main__':

	from os.path import isfile

	config_path = '/etc/pzst/config.json'
	if not isfile(config_path):
		print('Configuration not found: ' + config_path, file=sys.stderr)
		sys.exit(1)

	with open(config_path) as fd:
		config = json.loads(fd.read())

	now = False
	server = None

	for arg in sys.argv[1:]:

		if arg in [ '-n', '--now' ]:
			now = True

		else:
			server = arg

	if not server:
		print('Usage: %s <pzserver>' % sys.argv[0], file=sys.stderr)
		sys.exit(1)

	PZRestarterJob(config, server, now=now)
