#!/etc/pzst/env/bin/python

import os
import sys
import json
import time
import errno
import signal

from pwd import getpwnam
from os.path import exists
from datetime import timedelta
from subprocess import run, DEVNULL
from pypzst import get_pzserver_pid, init_log, isfloat


class PZRestarterJob:

	def __init__(self, config, server, restart_delay=0, restart_sequence=[]):
		self.server = server
		self.interrupted = False
		self.lockpath = '/var/cache/pzst/restartjob.' + server

		restart_sequence = restart_sequence or config.get('restart-sequence', [15, 10, 5, 2, 1])

		signal.signal(signal.SIGINT, self.signal_handler)
		signal.signal(signal.SIGTERM, self.signal_handler)

		self.logger = init_log('PZRestarterJob', 'pzrestartjob', server)

		self.logger.info(server + ': Restart job started (delay: %d, restart_sequence: %s)' % (restart_delay, restart_sequence))

		self.lock()

		self.wait_restart_delay(restart_delay)
		if self.interrupted:
			self.user_interrupted()

		self.wait_restart_sequence(restart_sequence)
		if self.interrupted:
			self.user_interrupted()

		self.pzserver_restart()

		self.unlock()

	def lock(self):

		flags = os.O_CREAT|os.O_EXCL|os.O_WRONLY

		try:

			os.close(os.open(self.lockpath, flags, mode=0o444))

		except OSError as error:

			if error.errno == errno.EEXIST:
				self.logger.info(self.server + ': Another instance of this script is already running!')
				sys.exit(0)

			raise

	def unlock(self):
		if exists(self.lockpath):
			os.remove(self.lockpath)

	def pzserver_message(self, message):
		self.logger.info(self.server + ': Sending message: ' + message)
		pid = get_pzserver_pid(self.server)
		run(['/usr/local/bin/pzstc', pid, 'servermsg', '"' + message + '"' ], stdout=DEVNULL)

	def pzserver_restart(self):
		self.logger.info(self.server + ': Restarting now!')
		pid = get_pzserver_pid(self.server)
		run(['/usr/local/bin/pzstc', pid, 'quit' ])

	def sleep(self, delay):

		for second in range(0, int(delay)):

			if not exists(self.lockpath):
				self.interrupted = True

			if self.interrupted:
				break

			time.sleep(1)

	def wait_restart_delay(self, restart_delay):

		if restart_delay != 0:
			plural = restart_delay >= 2 and 's' or ''
			self.logger.info(self.server + ': Waiting %d minute%s before initiating restart sequence' % (restart_delay, plural))
			self.sleep(restart_delay * 60)

	def wait_restart_sequence(self, restart_sequence):

		sequence = self.get_restart_sequence(restart_sequence)

		alerts = list(sequence)
		for delay in sequence:

			if delay == 0 or self.interrupted:
				break

			countdown = sum(alerts)
			alerts.remove(delay)

			delta = timedelta(minutes=countdown)
			clean_delta = str(delta).lstrip(':0')
			unit = delta.total_seconds() < 60 and 'seconds' or 'minute'
			plural = delta.total_seconds() / 60 >= 2 and 's' or ''
			message = 'Restarting server in %s %s%s' % (clean_delta, unit, plural)
			if delay < 5:
				message += '. Find a safe place for logout!'
			self.pzserver_message(message)

			self.sleep(delay * 60)

	def get_restart_sequence(self, restart_sequence):

		alert_sequence = []

		for i, minutes in enumerate(restart_sequence):

			delta = 0
			if i + 1 < len(restart_sequence):
				delta = restart_sequence[i + 1]

			alert_sequence.append(minutes - delta)

		return alert_sequence

	def signal_handler(self, sig, frame):
		self.interrupted = True

	def user_interrupted(self):
		message = ': Job interrupted by user!'
		self.logger.info(self.server + message)
		self.unlock()
		sys.exit(0)

if __name__ == '__main__':

	from os.path import isfile

	config = {}
	config_path = '/etc/pzst/config.json'
	if isfile(config_path):
		with open(config_path) as fd:
			config = json.loads(fd.read())

	server = None
	restart_delay = 0
	restart_sequence = []

	args = iter(sys.argv[1:])
	for arg in args:

		if arg in [ '-d', '--delay' ]:
			restart_delay = int(next(args))

		elif arg in [ '-n', '--now' ]:
			restart_delay = 0
			restart_sequence.append(0)

		elif arg.isnumeric() or isfloat(arg):
			restart_sequence.append(float(arg))

		else:
			server = arg

	if not server:
		print('Usage: %s <pzserver>' % sys.argv[0], file=sys.stderr)
		sys.exit(1)

	PZRestarterJob(config, server, restart_delay=restart_delay, restart_sequence=restart_sequence)
